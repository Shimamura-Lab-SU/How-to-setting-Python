# 第１回 Pythonの基本的な関数の使い方

## import文

インストールしたモジュールを使うためには，**import**関数を使用して読み込まなくてはなりません．

- import の基本的な使い方
- from ... import の使い方

### import の基本的な使い方

例えば，numpyモジュールを読み込むには，以下のコマンドを入力します．
```@Python
import numpy
```

例えばnumpyモジュールに含まれる関数arrayを用いるには，コンマを用いて
```@Python
A = numpy.array([1, 2, 3])
```
とします．

関数を使用する際にnumpyという文字を縮めたいときもあります．そのときは，以下のようにasを用います．
```@Python
import numpy as np
```
これでnumpyモジュールはnpという名前で置き換えられます．例えば上のコマンドは
```@Python
A = np.array([1, 2, 3])
```
となり，スクラッチの負担が若干減らすことができます．

## 配列・リスト・辞書の使い方

Pythonには，データ列を表現する方法としてリストとタプル，辞書が存在します．
まずはじめに，リストとタプル，辞書の定義の違いを以下の具体例からみてみましょう．

```@Python
# リストの定義
List = [0, 1, 2, 3, 4, 5] 

# タプルの定義
Tupple = (0, 1, 2, 3, 4, 5)

# 辞書の定義
Dict = { 	index = 0,
		ID = 'A-001-223',
		Name = 'Taro Yamada',
}
```

リストもタプルも，数値や文字列を並べたデータ列を表現する形式です．
ただし，**タプルは一度定義すると中身を書き換えできません．リストは代入等で書き換え可能です**．したがって，リストの方が使い勝手がよく，データ列を扱う際には一般にリストを用います．
一方で辞書は，キー(属性)と値の組み合わせで表現されるデータ列です．

## 配列・リストの要素の抽出・指定
リスト・タプルから要素を取り出すには，変数名に四角カッコをつけて，取り出したい要素のインデックスを指定します．
```@Python
# 0番目の要素の取り出し
List_0 = List[0]	# リストの場合
Tupple_0 = Tupple[0]		# タプルの場合

# 末尾の要素の取り出し
List_last = List[-1]	# リストの場合
Tupple_last = Tupple[-1]		# タプルの場合

# 1~3番目の要素の取り出し
List_1_3 = List[1:3]	# リストの場合
Tupple_1_3 = Tupple[1:3]		# タプルの場合
```

### 多次元リストの使い方

```

#### 配列について

配列は，データ列を表現する最も基本的な形式です．
例えば配列を

### 基礎編

  第0回：Python関連アプリのインストール
  
  第1回：Pythonの基本的な関数の使い方
  
  第2回：データの読み込み・書き出しとデバッグ
  
  第3回：関数・クラスの定義と使い方
  
 ### 応用編
   
   第4回：回帰・識別問題と解法アプローチ
   
   第5回：クラスタリング問題と解法アプローチ
   
   第6回：Attention機構をもつ深層ニューラルネットワークの実装